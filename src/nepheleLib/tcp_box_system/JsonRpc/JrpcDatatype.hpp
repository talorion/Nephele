#ifndef JRPCDATATYPE_HPP
#define JRPCDATATYPE_HPP

#include <QList>
#include <QMetaType>


#if defined( Q_OS_WIN )
//#if defined( _MSC_VER )
#include <wtypes.h>
#else
enum VARENUM {
    VT_EMPTY,VT_NULL,VT_I2,VT_I4,VT_R4,VT_R8,VT_CY,VT_DATE,VT_BSTR,VT_DISPATCH,
    VT_ERROR,VT_BOOL,VT_VARIANT,VT_UNKNOWN,VT_DECIMAL,VT_I1=16,VT_UI1,VT_UI2,VT_UI4,VT_I8,
    VT_UI8,VT_INT,VT_UINT,VT_VOID,VT_HRESULT,VT_PTR,VT_SAFEARRAY,VT_CARRAY,VT_USERDEFINED,
    VT_LPSTR,VT_LPWSTR,VT_RECORD=36,VT_FILETIME=64,VT_BLOB,VT_STREAM,VT_STORAGE,VT_STREAMED_OBJECT,
    VT_STORED_OBJECT,VT_BLOB_OBJECT,VT_CF,VT_CLSID,VT_BSTR_BLOB=0xfff,VT_VECTOR=0x1000,
    VT_ARRAY=0x2000,VT_BYREF=0x4000,VT_RESERVED=0x8000,VT_ILLEGAL= 0xffff,VT_ILLEGALMASKED=0xfff,
    VT_TYPEMASK=0xfff
};
//#ifdef _WIN64
//#define VT_INT_PTR  VT_I8
//#define VT_UINT_PTR VT_UI8
//#else
//#define VT_INT_PTR  VT_I4
//#define VT_UINT_PTR VT_UI4
//#endif
#endif

namespace talorion {

enum JrpcDataTypeId
{
    JRPCT_VOID = VT_EMPTY,
    JRPCT_INT8 = VT_I1,
    JRPCT_UINT8 = VT_UI1,
    JRPCT_INT16 = VT_I2,
    JRPCT_UINT16 = VT_UI2,
    JRPCT_INT32 = VT_I4,
    JRPCT_UINT32 = VT_UI4,
    JRPCT_INT64 = VT_I8,
    JRPCT_UINT64 = VT_UI8,
    JRPCT_REAL32 = VT_R4,
    JRPCT_REAL64 = VT_R8,
    JRPCT_STRING = VT_BSTR,
    JRPCT_WSTRING = VT_LPWSTR,
    JRPCT_REAL80 = VT_LPWSTR+1,
    JRPCT_BIT = VT_LPWSTR+2,
    JRPCT_BIGTYPE = VT_BLOB,
    JRPCT_MAXTYPES = VT_STORAGE,
};

using JrpcDatatype = JrpcDataTypeId;

using JrpcDatatypeList = QList<JrpcDatatype>;

}

Q_DECLARE_METATYPE(talorion::JrpcDatatype)
Q_DECLARE_METATYPE(talorion::JrpcDatatypeList)

#endif // JRPCDATATYPE_HPP
