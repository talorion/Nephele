== systems ==
    co2sensor
    configuration
    gui
    logging
    octave
    plotting
    scripting
    tcpbox
    tofdaqdll
    twtooldll
    twtps

== data ==
system polls data
system changes data
system provides data for


== script ==
system executes script
system provides data for script
system provides methods for script

== logging ==
system logs

== logging ==
error management
    severity    action
    -----------------------------------
    info        log
    debug       log
    warning     log, indicate on gui yellow
    error       log, indicate on gui red
    critical    log, show dialog on gui
    fatal       log, show dialog, exit program

    struct ErrorStruct {
        usigned char errorFlag; // 0 = FALSE, 1 = TRUE
        int errorCode,
        char errorMessage[256]
    };

    errorFlag == 0 && errorCode == 0 --> info
    errorFlag == 0 && errorCode >  0 --> debug       //errorCode == debug level
    errorFlag == 0 && errorCode <  0 --> warning
    errorFlag == 1 && errorCode <  0 --> error
    errorFlag == 2 && errorCode <  0 --> critical
    errorFlag == 3 && errorCode <  0 --> fatal

//=== Factory constants
QUuid get_AnalogInputValue_uid()const   {return ("{340c5f10-6d53-4c15-8fc4-4c559580cfbc}");}
QUuid get_AnalogOutputValue_uid()const  {return ("{c81ab50c-417c-404f-87b3-f9a8e474a6b1}");}
QUuid get_AnalogValue_uid()const        {return ("{6ddc030e-2001-4a38-a8ce-57b309f902ff}");}
QUuid get_DigitalInputValue_uid()const  {return ("{231fe499-ed93-4f66-a2ed-5ca5063a0d86}");}
QUuid get_DigitalOutputValue_uid()const {return ("{bb3e0e52-fb29-429b-9668-b2e3414e9db3}");}
QUuid get_DigitalValue_uid()const       {return ("{837c326e-e5fb-4271-97e8-8a3161cfc02c}");}
QUuid get_TcpBox_uid()const             {return ("{99060fb8-676f-47d8-b9f1-c9c492721009}");}
QUuid get_System_uid()const             {return ("{b50224fa-8908-4503-8296-8b0c8531e1ce}");}
QUuid get_Qt_Script_Engine_uid()const   {return ("{3a31ae25-c7f4-4e79-93c4-2a4f7b675298}");}
QUuid get_TofDaqDll_uid()const          {return ("{e16e6a36-4f76-4746-995d-62996c86f74a}");}
QUuid get_ScriptableObject_uid()const   {return ("{592400d5-7684-4c31-9bfa-7cd806c40589}");}
